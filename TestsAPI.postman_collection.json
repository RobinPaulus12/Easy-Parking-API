{
	"info": {
		"_postman_id": "7b77006c-0b8a-4f1d-98ac-99fbd9d16060",
		"name": "TestsAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38672110"
	},
	"item": [
		{
			"name": "Login",
			"item": [
				{
					"name": "Login Manager",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const atob = require('atob');\r",
									"\r",
									"pm.test(\"The JWT should contain status: manager\", () => {\r",
									"    const text = pm.response.text();\r",
									"    const payload_string = atob(text.split(\".\")[1]); // see: https://gist.github.com/benhowes/ebf9d2f905d7744e7aa093afe19ddbcd#gistcomment-2811160\r",
									"    const payload_objet = JSON.parse(payload_string);\r",
									"    pm.expect(payload_objet.status).to.be.equal(\"manager\");\r",
									"    pm.environment.set(\"jwt_token_manager\", text.split('\"')[0]);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"username\":\"Bienvenu\",\r\n    \"password\":\"password\"\t\r\n}\t",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}:{{port}}/user/login",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const atob = require('atob');\r",
									"\r",
									"pm.test(\"The JWT should contain status: user\", () => {\r",
									"    const text = pm.response.text();\r",
									"    const payload_string = atob(text.split(\".\")[1]); // see: https://gist.github.com/benhowes/ebf9d2f905d7744e7aa093afe19ddbcd#gistcomment-2811160\r",
									"    const payload_objet = JSON.parse(payload_string);\r",
									"    pm.expect(payload_objet.status).to.be.equal(\"user\"); \r",
									"    pm.environment.set(\"jwt_token_user\", text.split('\"')[0]);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"username\":\"Sneeks\",\r\n    \"password\":\"password\"\t\r\n}\t",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}:{{port}}/user/login",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Wrong Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The status code should be 404\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"Sneeks\",\r\n    \"password\": \"badPassword\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}:{{port}}/user/login",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Good Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The status code should be 201\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"The response should have a JWT token\", () => {\r",
									"    pm.response.to.be.string;\r",
									"    pm.expect(pm.response.text().split('.').length).to.be.equal(3);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"username\":\"Sneeks\",\r\n    \"password\":\"password\"\t\r\n}\t",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}:{{port}}/user/login",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Parking",
			"item": [
				{
					"name": "Get Parking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Parking 1 should be correctly returned\", () => {\r",
									"    const parking_one = {\r",
									"        parking_id: 1,\r",
									"        name: \"Parking de l'HÃ´tel de ville\",\r",
									"        coordinates: \"50.4661,4.8664\",\r",
									"        places: 100,\r",
									"        telephone: \"081123456\",\r",
									"        opening: \"07:00:00\",\r",
									"\t    place_width: \"2.5\",\r",
									"        fk_locality: 1\r",
									"    };\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.eql(parking_one);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}:{{port}}/parking/1",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"parking",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add parking as manager",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"The parking_id of the new product should be return\", () => {\r",
									"    const response = pm.response.json();\r",
									"    console.log(response);\r",
									"    pm.expect(response.parking_id).to.equal(5);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_manager}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\" : \"Parking de la rue\",\r\n    \"coordinates\": \"4.8678656073,0.4628869065\",\r\n    \"places\": 250,\r\n    \"telephone\": \"081462922\",\r\n    \"opening\": \"08:00:00\",\r\n\t\"place_width\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}:{{port}}/parking",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"parking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get new parking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Parking 5 should be correctly returned\", () => {\r",
									"    const parking_five = {\r",
									"        parking_id: 5,\r",
									"        name: \"Parking de la rue\",\r",
									"        coordinates: \"4.8678656073,0.4628869065\",\r",
									"        places: 250,\r",
									"        telephone: \"081462922\",\r",
									"        opening: \"08:00:00\",\r",
									"\t    place_width: \"2\", \r",
									"        fk_locality: null\r",
									"    };\r",
									"    const response = pm.response.json()\r",
									"    console.log(response);\r",
									"    console.log(parking_five);\r",
									"    pm.expect(response).to.be.eql(parking_five);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}:{{port}}/parking/5",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"parking",
								"5"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete new parking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_manager}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}:{{port}}/parking/5",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"parking",
								"5"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get deleted parking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}:{{port}}/parking/5",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"parking",
								"5"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Car",
			"item": [
				{
					"name": "Get all Cars from a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should contain 2 cars\", () => {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an('array').that.has.lengthOf(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Car 1 should be correctly returned\", () => {\r",
									"    const car_one = {\r",
									"        car_id: 1,\r",
									"        license_plate: \"1-NAM-123\",\r",
									"        model: \"Toyota Yaris\",\r",
									"        fk_user: 1\r",
									"    };\r",
									"    const response = pm.response.json();\r",
									"\r",
									"    const carFound = response.find(car => car.car_id === car_one.car_id);\r",
									"    pm.expect(carFound).to.eql(car_one);\r",
									"});\r",
									"\r",
									"pm.test(\"Car 2 should be correctly returned\", () => {\r",
									"    const car_two = {\r",
									"        car_id: 2,\r",
									"        license_plate: \"1-NAM-456\",\r",
									"        model: \"Honda Civic\",\r",
									"        fk_user: 1\r",
									"    };\r",
									"    const response = pm.response.json();\r",
									"\r",
									"    const carFound = response.find(car => car.car_id === car_two.car_id);\r",
									"    pm.expect(carFound).to.eql(car_two);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_user}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}:{{port}}/car/me",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"car",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add car as user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"The car_id of the new product should be return\", () => {\r",
									"    const response = pm.response.json();\r",
									"    console.log(response);\r",
									"    pm.expect(response.car_id).to.equal(5);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_user}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"license_plate\": \"1-NAM-999\",\r\n    \"model\": \"Audi A1\",\r\n    \"fk_user\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}:{{port}}/car",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"car"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all the cars from a user plus the new one",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// VÃ©rifier que la rÃ©ponse contient 3 voitures\r",
									"pm.test(\"Response should contain 3 cars\", () => {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an('array').that.has.lengthOf(3);\r",
									"});\r",
									"\r",
									"// VÃ©rification des voitures individuellement\r",
									"pm.test(\"Car 1 should be correctly returned\", () => {\r",
									"    const car_one = {\r",
									"        car_id: 1,\r",
									"        license_plate: \"1-NAM-123\",\r",
									"        model: \"Toyota Yaris\",\r",
									"        fk_user: 1\r",
									"    };\r",
									"    const response = pm.response.json();\r",
									"    const carFound = response.find(car => car.car_id === car_one.car_id);\r",
									"    pm.expect(carFound).to.eql(car_one);\r",
									"});\r",
									"\r",
									"pm.test(\"Car 2 should be correctly returned\", () => {\r",
									"    const car_two = {\r",
									"        car_id: 2,\r",
									"        license_plate: \"1-NAM-456\",\r",
									"        model: \"Honda Civic\",\r",
									"        fk_user: 1\r",
									"    };\r",
									"    const response = pm.response.json();\r",
									"    const carFound = response.find(car => car.car_id === car_two.car_id);\r",
									"    pm.expect(carFound).to.eql(car_two);\r",
									"});\r",
									"\r",
									"pm.test(\"Car 5 should be correctly returned\", () => {\r",
									"    const car_five = {\r",
									"        car_id: 5,\r",
									"        license_plate: \"1-NAM-999\",\r",
									"        model: \"Audi A1\",\r",
									"        fk_user: 1\r",
									"    };\r",
									"    const response = pm.response.json();\r",
									"    const carFound = response.find(car => car.car_id === car_five.car_id);\r",
									"    pm.expect(carFound).to.eql(car_five);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_user}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}:{{port}}/car/me",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"car",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete new car as user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_user}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}:{{port}}/car/5",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"car",
								"5"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get deleted car as user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_user}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}:{{port}}/car/5",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"car",
								"5"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Locality",
			"item": [
				{
					"name": "Get locality",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Locality 1 should be correctly returned\", () => {\r",
									"    const locality_one = {\r",
									"        locality_id: 1,\r",
									"        city: \"Namur\",\r",
									"        country: \"Belgium\",\r",
									"        postal_code: \"5000\",\r",
									"        street_name: \"Rue de Fer\"\r",
									"    };\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.eql(locality_one);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}:{{port}}/locality/1",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"locality",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add locality as manager",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"The locality_id of the new product should be return\", () => {\r",
									"    const response = pm.response.json();\r",
									"    console.log(response);\r",
									"    pm.expect(response.locality_id).to.equal(3);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_manager}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"city\": \"Namur\",\r\n    \"country\": \"Belgium\",\r\n    \"postal_code\": \"5000\",\r\n    \"street_name\": \"Rue de Bruxelles\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}:{{port}}/locality",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"locality"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get new locality",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Locality 3 should be correctly returned\", () => {\r",
									"    const locality_three = {\r",
									"        locality_id: 3,\r",
									"        country: \"Belgium\",\r",
									"        city: \"Namur\",\r",
									"        postal_code: \"5000\",\r",
									"        street_name: \"Rue de Bruxelles\"\r",
									"    };\r",
									"    const response = pm.response.json()\r",
									"    console.log(response);\r",
									"    console.log(locality_three);\r",
									"    pm.expect(response).to.be.eql(locality_three);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}:{{port}}/locality/3",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"locality",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete new locality",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_manager}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}:{{port}}/locality/3",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"locality",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get deleted locality",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}:{{port}}/locality/3",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"locality",
								"3"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}